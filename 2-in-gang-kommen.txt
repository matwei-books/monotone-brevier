
.. vim: set sw=2 ts=2 tw=78 et si:

2. In Gang kommen
=================

Um mit Monotone zu arbeiten benötige ich ein lokales Repository,
einen Schlüssel um die abgespeicherten Daten zu signieren und einen
Arbeitsbereich, dessen Inhalt von Monotone verfolgt wird.

2.1. Ein lokales Repository anlegen
-----------------------------------

Um Dateien mit Monotone zu verwalten muß ich ein lokales
Repository anlegen. Prinzipiell kann man ein Repository für mehrere oder alle
Projekte verwenden, ich ziehe in den meisten Fällen ein Repository für ein
Projekt vor. Das lokale Repository [#databaselocation]_ lege ich mit folgendem
Befehl an::

 $ mtn --db projekt.mtn db init

.. [#databaselocation] Die Datenbank könnte irgendwo abgelegt werden, bei mir
   landen alle im Verzeichnis *~/A/monotone*.

Alternativ kann ich mein lokales Repository gleich beim ersten Holen der
Revisionen von einem entfernten Repository anlegen::

 $ mtn --new-db --db project.mtn server branchwildcard

Hierbei ist *project.mtn* der Name der neuen Datenbankdatei, *server* die
Adresse des entfernten Repository und *branchwildcard* die Beschreibung der
Zweige, die ich laden will.

2.2. Persönliche Schlüssel erzeugen
-----------------------------------

Mit meinen persönlichen Schlüsseln signiere ich alle Daten, die ich im
Repository einspeichere sowie alle Tags die ich vergebe. Über diesen Schlüssel
werden auch die Zugriffsrechte auf entfernte Repositories eingestellt::


 $ mtn genkey mathias@weidner.in-bad-schmiedeberg.de

Um das Kennwort für den Schlüssel nicht jedesmal eingeben zu müssen kann ich
(unter UNIX, mit installiertem ssh_agent) den Schlüssel zur Verwaltung an
ssh_agent übergeben::

 $ mtn ssh_agent_export ~/.ssh/id_monotone
 $ chmod 600 ~/.ssh/id_monotone
 $ ssh-agent /bin/bash
 $ ssh-add ~/.ssh/id_monotone

Anschließend brauche ich den Monotone-Schlüssel nur noch einmal während der
Sitzung eingeben.

Alternativ (und weniger sicher) kann ich das Kennwort in einen Hook in der
Datei *.monotonerc* [#monotonerc]_ eintragen::


 $ mkdir ~/.monotone
 $ cat >> ~/.monotone/.monotonerc
 function get_passphrase(keypair_id)
     return "jimsekret"
 end
 ^D

.. [#monotonerc] Die Datei *.monotonerc* bzw. Ihr Äquivalent unter MS Windows
   ist üblicherweise im Verzeichnis *~/.monotone/* bzw. unter MS Windows etwa
   bei *C:/Dokumente und Einstellungen/Name/Anwendungsdaten/monotone/* zu
   finden. Hier gibt es auch ein Unterverzeichnis */keys/*, in dem die
   Monotone bekannten Schlüssel gespeichert sind.

2.3. Einen Arbeitsbereich anlegen
---------------------------------

Einen Arbeitsbereich (workspace) kann ich anlegen indem ich einen vorhandenen
Zweig aus einem lokalen Repository auschecke (``mtn checkout``) oder indem ich
einen neuen Arbeitsbereich aufsetze (``mtn setup``). So lege ich einen neuen
Arbeitsbereich an::

 $ mkdir -p ~/P/projekt
 $ cd ~/P/projekt
 $ mtn --db ~/A/monotone/projekt.mtn \
       setup --branch projekt.branch

Monotone kann nun im lokalen Repository
*~/A/monotone/projekt.mtn* Dateien aus dem Verzeichnis *~/P/projekt/* im Zweig
*projekt.branch* verwalten. Von sich aus tut es das allerdings nicht. Damit
Monotone den aktuellen Stand einer Datei im lokalen Repository verwaltet, muss
ich ihm die Datei vorher bekannt machen.

2.4. Dateien hinzufügen / umbenennen / entfernen
------------------------------------------------

Dateien im Arbeitsbereich, die von Monotone verwaltet werden sollen, kann ich
ihm mit ``mtn add`` bekannt machen. Mit ``mtn drop`` schließe ich eine Datei
von der weiteren Verwaltung durch Monotone aus (ältere Versionen bleiben im
Repository erhalten und zugänglich). Wenn ich eine Datei umbenennen oder in ein
anderes Verzeichnis verschieben und dabei ihre Versionsgeschichte erhalten
möchte, verwende ich ``mtn rename``.

Welche Dateien Monotone verwaltet (kennt), zeigt mir das Kommando ``mtn list
known`` im Arbeitsbereich. Dem entsprechend zeigt ``mtn list unknown`` die
Dateien im Arbeitsbereich, die Monotone nicht kennt (nicht verwaltet).
Schließlich zeigt ``mtn list ignored`` die Dateien, die Monotone gar nicht
kennen will. Diese letzte Liste kann ich mit einer Datei namens *.mtn-ignore*
im Arbeitsbereich beeinflussen [#mtnignore]_.
Damit kann ich die Dateien, deren Änderungen ich nicht verfolgen will,
ausschließen und schließlich mit ``mtn add --unknown`` alle anderen Dateien
mit einem Mal unter Versionsverwaltung stellen.

.. [#mtnignore] Natürlich kann ich auch *.mtn-ignore* mit Monotone verwalten.

2.5. Änderungen bestätigen
--------------------------

Monotone merkt sich nahezu beliebig viele Zwischenstände der von ihm
verwalteten Dateien, aber nur auf Aufforderung mit ``mtn commit``. Dieser
Befehl verlangt eine Notiz, die die damit erzeugte Revision beschreibt. Die
Notiz kann ich mit der Option ``--message`` auf der Kommandozeile mitgeben.
Ansonsten öffnet Monotone einen Dateieditor mit dem man die Notiz in aller
Sorgfalt erstellen kann. Erst dann wird der momentane Stand aller verwalteten
Dateien im lokalen Repository zwischengespeichert.

2.6. Unterschiedliche Änderungen zusammenführen
-----------------------------------------------

Wenn in einem Zweig verschiedene Änderungen von einem oder mehreren
Entwicklern bestätigt wurden, kann es passieren, dass es mehrere letzte Stände
gibt. Diese führe ich mit ``mtn merge`` zusammen.

Möchte ich hingegen die Änderungen in einem Zweiges auf einen anderen Zweig
anwenden, verwendet man ``mtn propagate``.
