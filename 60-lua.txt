
.. vim: set sw=2 ts=2 tw=78 et si:

Anpassungen und Erweiterungen
=============================

Monotone nutzt die Programmiersprache *Lua* für Anpassungen und Erweiterungen.

Lua-Funktionen werden in *rcfiles* definiert, die bei jedem Lauf von monotone
gelesen werden. Als *rcfiles* werden verwendet:

- *~/.monotone/monotonerc* bzw. *%APPDATA%\\monotone\\monotonerc*
  (auf MS Windows)
- *_MTN/monotonerc* im aktuellen Arbeitsbereich
- Dateien, die mit ``--rcfile=Dateiname`` in der Kommandozeile angegeben
  werden
- alle Dateien in Verzeichnissen, die mit ``--rcfile=Verzeichnisname`` in der
  Kommandozeile angegeben werden

Zuerst wird die Datei *~/.monotone/monotonerc*, dann
*_MTN/monotonerc*, wenn vorhanden und schließlich die mit *--rcfile*
angegebenen in der Reihenfolge der Kommandozeile geladen.
Spätere Definitionen überschreiben dabei frühere.

Lua-Funktionen werden auf zwei Arten in monotone verwendet. Als *Hooks* und
als benutzerdefinierte Befehle. Beide Arten werden ausführlich auf der Website
von monotone beschrieben.

Lua-Hooks
---------

*Hooks* sind Lua-Funktionen, die von monotone an verschiedenen Stellen
aufgerufen werden. Monotone stellt Default-Definitionen für einige dieser
Funktionen bereit.
Für andere Hooks gibt es keine Definitionen, stattdessen wird ein
Default-Rückgabewert verwendet.

Für eigene Definitionen kann es hilfreich sein, den Code der alten Definition
zumindest teilweise zu verwenden. Das ist mit *Lua* mit folgendem Code
möglich::

 do
     local old_hook = default_hook
     function default_hook(arg)
         if not old_hook(arg) then
             -- do other stuff
         end
     end
 end

Die alte Definition von *default_hook* ist über die Variable *old_hook* nur
innerhalb des *do* Blocks verfügbar. Global, das heißt, für monotone ist
*default_hook* jetzt in dieser Funktion definiert.

Benutzerdefinierte Befehle
--------------------------

Monotone stellt eine Reihe von Hilfsfunktionen zur Verfügung, die nicht im
Standard-Lua zur Verfügung stehen. Eine dieser Funktionen ist::

 register_command(name, params, abstract, description, function)

Diese Funktion fügt einen Befehl *name* zu den Benutzerbefehlen von monotone
hinzu. Wenn dieser registrierte Befehl aufgerufen wird, wird monotone die mit
*function* bereitgestellte Definition aufrufen. Diese Funktion würde
üblicherweise ``mtn_automate`` (siehe unten) verwenden, um den Aufruf
abzuarbeiten.  *params* ist eine Zeichenkette mit der Liste der Parameter
für den Befehl. *abstract* ist eine kurze Beschreibung, *description* eine
längere Beschreibung des Benutzerbefehls. Bei ``mtn help`` werden *params*,
*abstract* und *description* ausgegeben.

Eine weitere wichtige Funktion ist::

 mtn_automate(command args... )

Diese Funktion ruft den Befehl ``automate command`` von monotone mit *args*
auf. Das Ergebnis ist ein *pair* (Lua), das besteht aus einem Boolean
(``true`` bei Erfolg) und einer Zeichenkette, die den Inhalt von ``stdout``
des Aufrufs von ``automate command`` enthält.

Diese Funktion ist nicht für den Gebrauch in normalen Lua-Hooks, sondern eher
für Lua-Funktionen, die mit ``register_command`` registriert wurden.

Beachte, dass Tastatureingaben wie bei der
``--non-interactive`` Option von monotone deaktiviert sind.
Aktionen, die Operationen mit
passwortgeschützten Schlüsseln benötigen, werden daher nicht funktionieren, es
sei denn, dass der ``get_passphrase`` Hook eingerichtet wurde.

Beispiel: Einbetten der aktuellen Revision
..........................................

Bei einigen Versionsverwaltungssystemen - zum Beispiel RCS und CVS - gibt es
Schlüsselworte, die im Quelltext eingesetzt werden können und dann vom
Versionsverwaltungssystem durch die entsprechenden Werte, wie die Version
der Datei oder das Datum des Check-in, ersetzt werden. So etwas gibt es bei
monotone nicht, sodass man sich hier im Bedarfsfall mit einem Script behilft,
das eine Datei automatisch generiert, die dann im Quelltext eingebunden wird.

So etwas habe ich bei diesem Text ebenfalls verwendet. Die Angaben zur Basis-
und aktuellen Revision werden durch folgendes Script generiert::

 
 --  revision.lua -- Monotone extension command "mtn revision"
 --  usage: mtn --rcfile revision.lua revision

 register_command(
     "revision", "",
     "Print info about actual revision.",
     "Determines the base revision and whether the current " ..
     "revision is different. Prints the information " ..
     "suitable for inclusion into restructured text.",
     "command_revision"
 )   

 function say(abc) io.stdout:write(abc .. "\n") end

 function command_revision()
     rc, txt = mtn_automate("get_base_revision_id")
     base_rev = string.match(txt,"%x+")
     if nil == base_rev then
         base_rev = ""
     end
     input, output, pid = spawn_pipe("mtn", "ls", "changed")
     res, rc = wait(pid)
     changed = output:read('*a')
     if 0 == string.len(changed) and "" ~= base_rev then
         curr_rev = base_rev
     else
         rc, txt = mtn_automate("get_current_revision_id")
         curr_rev = string.match(txt,"%x+")
     end
     say(":Autor: Mathias Weidner")
     say(":Datum: " .. os.date('%Y-%m-%d'))
     say(":Basisrevision: " .. base_rev)
     say(":Aktuelle Revision: " .. curr_rev)
     say(":Lizenz: CC BY-SA 3.0 (Creative Commons)")
 end


Dieses Script wird im Makefile auf die folgende Art aufgerufen::

 revision.txt: $(SOURCES) $(IMAGES) preamble.tex Makefile
         mtn --rcfile lua/revision.lua revision > revision.txt

Anschließend wird die Datei *revision.txt* im Vorspann eingebunden::

 .. include:: revision.txt

Das Ergebnis ist auf Seite 3 dieses Textes zu sehen.

Ich gebe hier die Basisrevision und die aktuelle Revision aus, sodass man
erkennen kann,

- auf welcher Basisrevision im Repository der Text aufbaut
- ob an dieser Revision Veränderungen vorgenommen wurden (dann sind Basis- und
  aktuelle Revision verschieden)
