
.. vim: set sw=2 ts=2 tw=80 et si:

Grundlagen
==========

.. epigraph::

   Wenn es nicht in der Versionsverwaltung ist, existiert es nicht.

   -- Troy Hunt

Monotone als Versionsverwaltungssystem hält für mich Zwischenstände
von Dateien, die ich bearbeite, bereit. Da sind zum einen die aktuellen
Versionen im Arbeitsbereich und die jeweils mit dem Vorgänger und
Nachfolgern verketteten Versionen im Repository.

Das Repository ist dabei die Stelle, an der Buch geführt wird über alle von mir
bestätigten Änderungen an den Dateien im Arbeitsbereich. Bei monotone ist das
Repository eine SQLite-Datenbank.
Da monotone eine verteiltes Versionsverwaltungssystem ist, gibt es nicht nur ein
Repository sondern mehrere, üblicherweise eins auf dem lokalen Rechner welches
im Workspace referenziert wird und weitere Repositories auf anderen Rechnern,
die mit dem lokalen abgeglichen werden.

Eine Datei ist im Repository jeweils mit ihrem Vorgänger und
Nachfolger (soweit vorhanden) verknüpft. Dabei ist es möglich, dass eine
bestimmte Version keinen Vorgänger hat (es ist die erste eingecheckte Version
dieser Datei), einen Vorgänger (Datei wurde ausgecheckt, geändert,
eingecheckt) oder mehrere (die Version ist aus der Vereinigung verschiedener
älterer Versionen entstanden). Ebenso ist es möglich, dass eine Version keinen
Nachfolger hat (es ist die letzte eingecheckte Version), einen Nachfolger, oder
mehrere (die Version wurde mehrfach ausgecheckt, verschieden editiert und wieder
eingecheckt).

Um einen bestimmten Stand verschiedener Dateien, sozusagen einen Schnappschuss,
im Repository festzuhalten, verwendet monotone interne textbasierte
Datenstrukturen, die ursprünglich Manifest genannt wurden. Diese selbst werden
ebenfalls im Repository verwaltet. Das Manifest, welches seit Version 0.26
Roster genannt wird, enthält den relativen Pfad, die zugehörige Version und
noch weitere Informationen zu jeder erfassten Datei zu diesem Zeitpunkt.

Alle im Repository verwalteten Daten werden mit kryptographischen Schlüsseln
signiert und dadurch gegen Veränderung gesichert.

Wo sind meine Daten
-------------------

Die Daten, die von monotone verwaltet werden, befinden sich an vier
verschiedenen Orten:

- im *Keystore*
  befinden sich meine privaten Schlüssel
- im *Arbeitsverzeichnis*
  sind die Dateien, die ich unmittelbar bearbeite
- im *lokalen Repository*
  befinden sich die gespeicherten Revisionen der Dateien
- in einem *entfernten Repository*
  sind die Revisionen der von mir und eventuell anderen bearbeiteten Dateien,
  nachdem mit dem Repository synchronisiert wurde.

.. image:: img/wo-sind-die-daten.png
   :alt: Wo sind die Daten?
   :scale: 50
   :align: center

Die folgenden Befehle bewegen meine Daten in und zwischen den verschieden Orten.

Mit den monotone-Kommandos *setup* und *checkout* kann ich einen neuen lokalen
Arbeitsbereich einrichten. Mit *add*, *rm* und *rename* kann ich Dateien zum
überwachten Arbeitsbereich hinzufügen, daraus entfernen oder umbenennen.

Der Befehl *update*
bringt Änderungen aus dem lokalen Repository in meinen Arbeitsbereich.
Mit *commit* übernehme ich Änderungen im Arbeitsverzeichnis in das lokale
Repository. Mit *revert* kann ich Änderungen im Arbeitsverzeichnis rückgängig
machen. Diese Befehle beeinflussen lediglich das lokale Repository und meinen
Arbeitsbereich.

Erst mit dem monotone-Kommando *pull* hole ich Daten aus einem entfernten
Repository in das lokale und mit *push* schiebe ich Daten aus dem lokalen
Repository in das entfernte, *sync* schließlich gleicht die Unterschiede
zwischen lokalem und entfernten Repository in einem Aufruf aus, das heisst
lokale Änderungen werden in das entfernte Repository übernommen und umgekehrt.

Für *pull* wird kein Schlüssel benötigt, wenn der Server entsprechend
konfiguriert ist. Damit ist ein anonymer Download möglich.

Schließlich gibt es noch das monotone-Kommando *genkey*, dass einen neuen
Schlüssel erzeugt und diesen im Keystore ablegt.
