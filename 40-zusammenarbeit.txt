
.. vim: set sw=2 ts=2 tw=78 et si:

Tag für Tag
===========

Workflow
--------

Bei der täglichen Arbeit mit monotone (oder auch anderen VCS) gibt es etliche
mögliche Workflows um die Änderungen im Code zu verwalten.

Einer davon ist, im Hauptprojektzweig (Trunk) nur umfangreiche Änderungen wie
z.B. neue Features oder Bugfixes zu führen und für die detaillierten
Änderungen (die eigentliche Arbeit an den Features oder Bugfixes) jeweils
eigene Zweige zu nehmen. Verwendet man eine Fehlerdatenbank oder ein
Ticketsystem, so kann mann den Namen für die Arbeitszweige daraus ableiten
(z.B. die Fehler- oder Ticketnummer).

Dieser Arbeitsablauf ist dem in
http://nakedstartup.com/2010/04/simple-daily-git-workflow/ beschriebenen
Workflow für *git* (ein anderes verteiltes Versionskontrollsystem)
nachempfunden.

Daraus ergibt sich folgender grundlegender Ablauf für jedes Ticket, jeden
Fehler:

 1. Checkout mit neuem Zweig
 2. Arbeit am Problem mit vielen Commits
 3. Merge des neuen Zweigs mit Trunk

Diese drei Abläufe sehen im Einzelnen wie folgt aus.

Checkout mit neuem Zweig
........................

Entweder ich halte alle von mir bearbeiteten Tickets in demselben lokalen
Repository::

 $ mtn --db alles.mtn pull
 $ mtn --db alles.mtn co -branch trunk

oder ich nehme jedesmal ein frisches und checke den aktuellen Stand aus::

 $ mtn --db ticketnr.mtn db init
 $ mtn --db ticketnr.mtn pull remotehost --branch trunk
 $ mtn --db ticketnr.mtn co --branch trunk .

Als nächstes stelle ich auf den neuen Zweig um::

 $ mtn cert h: branch trunk.ticketnr
 $ mtn update --branch trunk.ticketnr

Damit bin ich bereit für die

Arbeit am Problem mit vielen Commits
....................................

 1. Arbeit am Problem
 2. mtn list unknown
 3. mtn add | move | remove
 4. mtn status | diff
 5. mtn commit -m "detaillierte Beschreibung"
 6. wieder von vorn, bis das Problem gelöst ist

Wenn alle Tests in dem neuen Zweig fehlerfrei durchlaufen, bin ich soweit, die
Änderungen wieder im Hauptzweig einzupflegen.

Merge des neuen Zweigs mit Trunk
................................

Je nachdem, wieviel Leute am Projekt mitarbeiten, ist die Wahrscheinlichkeit
dafür, dass inzwischen andere Änderungen in trunk eingepflegt wurden hoch oder
niedrig. Darum hole ich als erstes den aktuellen Stand von trunk in mein
lokales Repository und spiele etwaige Änderungen von trunk in meinen Zweig
ein::

 $ mtn pull
 $ mtn propagate trunk trunk.ticketnr

Damit habe ich die Chance mögliche Konflikte in meinem Zweig aufzulösen ohne
den Hauptzweig mit Zwischenständen zu belasten.

Ich lasse nochmal alle Tests durchlaufen. Bei Fehlern kehre ich zurück zur
Arbeit am Problem in meinem Zweig. Ging alles gut, schiebe ich meine
Änderungen in den Hauptzweig und veröffentliche sie [#mtnsync]_::

 $ mtn propagate trunk.ticketnr trunk
 $ mtn sync

.. [#mtnsync] Mit ``mtn sync`` veröffentliche ich meine Änderungen im
   entfernten Repository und hole mir gleichzeitig die Änderungen, die dort
   von anderen veröffentlicht wurden.

Wenn zwischen dem ``mtn pull`` und dem ``mtn sync`` niemand anders Änderungen
in den Hauptzweig eingespielt hat, bin ich fertig.

In dem wahrscheinlich eher seltenen Fall, dass jemand in der Zwischenzeit
wieder eine neue Version in Trunk eingespielt hat, haben wir nun vieleicht
zwei oder mehr Kopfversionen im Hauptzweig. Diese vereinige ich in meinem
lokalen Repository mit::

 $ mtn merge trunk

Dabei löse ich eventuell auftretende Konflikte und lasse nochmal alle Tests
durchlaufen. Bei Problemen propagiere ich den letzten Stand des Hauptzweiges
nochmal in meinen Problemzweig und kehre zurück zur Arbeit am Problem.

Ging alles gut, veröffentliche ich die Änderungen::

 $ mtn sync

Ein anderes Modell wäre z.B. das nur einer der Entwickler Änderungen mit dem
Hauptzweig abgleicht und dazu vorher seinen Zweig mit den Änderungen der
anderen Entwickler aktualisiert.

Wenn ein Stand erreicht ist, der eingefroren und veröffentlicht werden soll,
markiere ich diese Revision mit einem *version tag* und erzeuge einen neuen
Zweig, in dem nur noch Fehlerkorrekturen für diesen veröffentlichten Stand
gesammelt werden.

Konflikte beim Zusammenführen
-----------------------------

Es gibt zwei Möglichkeiten, verschiedene Kopfrevisionen eines Zweiges
zusammenzuführen. Vor dem Commit der eigenen Änderungen mit ``mtn update`` und
nach dem Commit mit ``mtn merge``. Bei beiden Varianten verwendet monotone die
gleichen Algorithmen zum Zusammenführen. Bei der ersten Variante ist es
möglich, dass bei einem Konflikt, der nicht gleich manuell gelöst werden kann,
der Arbeitsbereich einen fehlerhaften Stand hat.
Die zweite Variante hat demgegenüber den Vorteil, dass man bei Problemen mit
dem Zusammenführen auf die bestätigte, nicht zusammengeführte Version
zurückgehen und weiterarbeiten kann. Wenn der Konflikt gelöst ist, kann man
die Revisionen immer noch zusammenführen.

Konflikte können beim Zusammenführen zweier Revisionen in der Datenbank oder
beim Zusammenführen im Arbeitsbereich auftreten.

Die monotone-Befehle *show_conflicts* und *automate show_conflicts* zeigen
Konflikte, die auftreten, wenn man das Revisionen in der Datenbank (nach
*commit*) zusammenführen will. Leider können diese Befehle noch nicht die
Konflikte im Arbeitsbereich auflisten.

Mit dem Befehl *conflicts* und seinen Unterbefehlen können
Konfliktlösungen für monotone vorgegeben werden. Dieser Befehl erfordert einen
Arbeitsbereich. Die Konfliktlösungen werden in einer Datei gespeichert und
bei ``mtn merge`` verwendet.

.. XXX mtn conflicts untersuchen und beschreiben

Konflikttypen
.............

- Konflikte im Inhalt von Dateien

  Diese kommen allgemein am häufigsten vor. Sie treten z.B. auf, wenn in einer
  Datei unterschiedliche Änderungen gegenüber dem gemeinsamen Vorfahren 
  aufgetreten sind.  Bei Änderungen an verschiedenen Zeilen wird monotone
  diese Änderungen intern zusammenführen.

  Falls binäre Dateien betroffen sind, oder die gleiche Zeile auf verschiedene
  Weise geändert wurde, ruft monotone den *merge3* Hook auf. In der
  Default-Implementierung schreibt dieser die verschiedenen Texte in temporäre
  Dateien und ruft das externe Programm auf, das von der Lua-Funktion
  *get_preferred_merge3_command()* angegeben wird, um den Konflikt zu lösen.

- Doppelte Namen

  Dieser Konflikt tritt auf, wenn zwei Dateien oder Verzeichnissen in beiden
  Zusammenführungskandidaten der gleiche Name gegeben wurde. Diese Dateien
  oder Verzeichnisse können neu aufgenommen oder in den widersprechenden
  Namen umbenannt worden sein.

  Die Lösung für diesen Konflikt hängt von den genaueren Umständen ab.

  - Gleiche Datei

    In diesem Fall wird die Datei in einer der Revisionen mit entfernt. Der
    monotone-Befehl *conflicts* hilft hierbei.

  - Verschiedene Dateien

    Hier muss die Datei in einer der Revisionen umbenannt werden. Das zieht
    für gewöhnlich Änderungen in anderen Dateien, die diese Datei
    referenzieren, nach sich. Auch hier hilft ``mtn conflicts ...``

  - Verzeichnisse

    Auch hier gibt es die beiden Basis-Strategien *Entfernen* und
    *Umbenennen*. Da beim Entfernen eines Verzeichnisses auch alle Dateien mit
    entfernt werden müssen, ist es fast immer besser, das Verzeichnis temporär
    umzubenennen und die darin enthaltenen Dateien einzeln zu betrachten,
    indem man sie zusammenführt umbenennt oder löscht. Schließlich kann man
    das temporäre Verzeichnis entfernen. Der monotone-Befehl *conflicts* kann
    hierbei aber nicht helfen, das muss man direkt tun.

- Missing Root

  Das tritt eher selten auf. Es passiert, wenn ein
  Verzeichnis in einer der beiden Revisionen zum Wurzelverzeichnis gemacht
  wurde und in der anderen Revision gelöscht wurde.

  Dieser Konflikt wird gelöst, in dem in der Revision mit dem geänderten
  Wurzelverzeichnis ein anderes Verzeichnis zur Wurzel gemacht wird. In der
  Revision, in der das Verzeichnis gelöscht wurde, kann man nichts machen, da
  eine Datei oder ein Verzeichnis, welches einmal (im Repository) gelöscht
  wurde, nicht wiederbelebt werden kann, sondern nur neu angelegt.

- Ungültige Namen

  Monotone reserviert den Namen *_MTN* im Wurzelverzeichnis des
  Arbeitsbereiches für interne Zwecke und behandelt alle Dateien diesen Namens
  im Wurzelverzeichnis als illegal für Versionierung.

  In anderen Verzeichnissen im Arbeitsbereich ist der Name legal.

- Endlosschleifen bei Verzeichnissen

  Das tritt auf, wenn in einer Revision ein Verzeichnis unter ein zweites
  verschoben wurde und in der anderen Revision das zweite unter das erste.

  Das kann einfach gelöst werden, indem eines der Verzeichnisse aus dem
  anderen heraus verschoben wird.

  Der monotone-Befehl *conflicts* kann hierbei noch nicht helfen.

- Verwaiste Knoten

  Ein verwaister Knoten tritt auf, wenn in einer Revision ein Verzeichnis
  gelöscht wurde und in der anderen Revision Dateien oder Verzeichnisse dort
  neu angelegt oder dahin verschoben wurden.

  Das kann einfach gelöst werden, indem man die verweisten Knoten aus dem
  gelöschten Verzeichnis woandershin verschiebt oder löscht.

  ``mtn conflicts`` kann hierbei helfen. Falls es sich jedoch bei dem
  verwaisten Knoten um ein Verzeichnis handelt und dieses gelöscht werden
  soll, müssen erst der Inhalt des Verzeichnisses gelöscht werden, bevor ``mtn
  conflicts`` aufgerufen wird.

- Mehrere Namen

  Dieser Konflikt tritt auf, wenn eine Datei in beiden Revisionen in
  unterschiedliche Namen umbenannt wurde.

  Zur Lösung benennt man die Datei in einer Revision so um, wie sie in der
  anderen heißt.

  Der monotone-Befehl *conflicts* kann hierbei noch nicht helfen.

- Attributkonflikte

  Das passiert, wenn die Attribute einer Datei bzw. eines Verzeichnisses in
  den beiden Revisionen unterschiedlich sind.

  Zur Lösung ändert man die Attribute in einer oder beiden Revisionen so, dass
  sie gleich sind.

  Der monotone-Befehl *conflicts* kann hierbei noch nicht helfen.

Fehlersuche durch Zweiteilung
-----------------------------

Es ist gute Praxis, bei der Arbeit möglichst kleine Änderungen als eigene
Revisionen abzuspeichern. Ein Vorteil ist, dass der Übergang zwischen zwei
Revisionen überschaubar bleibt und damit eine eventuell nötige Fehlersuche
erleichtert wird.

Dann kann es aber vorkommen, dass bei einem im Laufe der Entwicklung
eingeführten Fehler sehr viele Revisionen zwischen der letzten guten und der
Revision, bei der der Fehler bemerkt wurde, liegen. Hier hilft das
Bisektionsverfahren die Änderung zu ermitteln, bei der der Fehler
wahrscheinlich eingeführt wurde.

Die Bisektion benötigt einen Arbeitsbereich ohne Änderungen. Sie startet
indem Revisionen mit ``mtn bisect good -r rev_good`` und ``mtn bisect bad -r
rev_bad`` markiert werden. Damit hat man die Menge der verdächtigen
Revisionen eingegrenzt. Monotone wählt als nächstes die Revision in der Mitte
zwischen der guten und der schlechten Revision aus und lädt diese in den
Arbeitsbereich. Nachdem man diese Revision getestet hat, markiert man diese
ebenfalls mit *good* bzw. *bad* (dabei brauch keine Revision mehr angegeben
werden). Monotone halbiert im Arbeitsbereich automatisch den Bereich zwischen
der zuletzt als *good* und der zuletzt als *bad* markierten Revision, so dass
man auf schnellst möglichem Weg zu der Revision kommen kann, in der der Fehler
zum ersten Mal auftrat. Kommt man auf dem Weg hierhin zu einer Revision die
nicht testbar ist (z.B. weil sie nicht compiliert werden kann), überspringt
man diese Revision mit ``mtn bisect skip``.

Mit ``mtn bisect status`` kann man sich jederzeit den Status der Bisektion
ausgeben lassen.

Zugriffsrechte
--------------

Bei monotone ist es viel wichtige, was aus einer einem Repository herauskommt,
als was hinein geht. Der Austausch über Netzwerk ist eine einfache Kommunikation
von Fakten (Dateiinhalte und Revisionen) und Zusicherungen über deren Wert (die
Zertifikate, mit denen diese signiert sind). Diese Zusicherungen müssen nicht
notwendigerweise geglaubt werden, im Abschnitt Vertrauensgrundlagen wird näher
darauf eingegangen. Es gibt einfache Steuerungsmöglichkeiten für den
grundlegenden Zugriff auf die Datenbank, alles darüber hinausgehende sollte über
Vertrauensverhältnisse geregelt werden.

Konkret kann man Leserechte für den Zugriff über das Netz in der Datei
~/.monotone/read-permissions vergeben und Schreibrechte dementsprechend in der
Datei ~/.monotone/write-permissions. Während die Leserechte auf bestimmte Zweige
beschränkt werden können, werden Schreibrechte für die ganze Datenbank vergeben.

Ein Beispiel für die Datei read-permissions könnte so aussehen::

  pattern "net.example.*"
  allow "*"
  continue "true"

  pattern "*"
  allow "mathias@example.net"

Dies würde aller Welt Lesezugriff auf alle Zweige erlauben, die mit
"net.example." anfangen und mir Zugriff auf alle Zweige.

Die Datei write-permissions enthält lediglich eine Aufzählung von zugelassenen
Schlüsseln, einen pro Zeile::

  mathias@example.net

Damit der entsprechende Schlüssel anerkannt wird, muss er vorher mit ``mtn
pubkey`` extrahiert und dann mit ``mtn read`` importiert werden.

Vertrauensgrundlagen
--------------------

In monotone wird alles Vertrauen über Zertifikate gehandhabt.

Zertifikate und Revisionen
..........................

Jede im Repository abgelegte Version wird mit einer kryptographischen
SHA1-Hash identifiziert, die sowohl den Inhalt als auch ihre ganze Abstammung
repräsentiert. Diese SHA1-Hash wird Zertifikat (englisch kurz *cert*) genannt.

Die normalen Zertifikate, die mit allen Revisionen einhergehen sind für den
Autor, den Zweig der Revision und das Änderungsprotokoll (*changelog*)

Das Zweigzertifikat ist das wichtigste für die automatischen Operationen von
monotone.

Vertrauenswürdige Versionen
...........................

Jeder Benutzer kann seine eigenen Vorlieben darüber konfigurieren, welchen
Zertifikaten er vertraut und welchen nicht. Diese Präferenzen können in
verschiedenen Arbeitsbereichen unterschiedlich sein. So ist es möglich, in
einem Arbeitsbereich den stabilen Zweig zu verfolgen und in diesem
Arbeitsbereich zusätzliche Zertifikate von der Qualitätssicherung zu
verlangen, während ich in einem anderen Arbeitsbereich die aktuellsten
Entwicklungen im Entwicklerzweig verfolge und Zertifikate von allen bekannten
Projektentwicklern akzeptiere.

Diese Einstellungen werden über Lua-Hooks realisiert.

Synchronisation, Zusammenführen und Vertrauen
.............................................

Bei monotone sind die Synchronisation, das Zusammenführen (Merge) und das
Aussprechen von Vertrauen voneinander getrennt. Das heißt:

- Bei einer Synchronisation werden lediglich Dateien und Zertifikate
  ausgetauscht.

- Nach der Synchronisation kann ich entscheiden, was ich mit den neuen
  Revisionen anfange. Z.B. könnte ich diese mit meiner Arbeit zusammenführen,
  auschecken oder einfach ignorieren.

- Vertrauen gegenüber den neuen Zertifikaten wird erst geprüft, wenn ich
  meinen Arbeitsbereich aktualisiere.

Qualitätssicherung
------------------

Monotones Mechanismen zur Qualitätssicherung beruhen überwiegend auf der
Einschränkung von Subgraphen der Revisionsgeschichte. Es gibt zwei
Möglichkeiten, diese einzuschränken:

- Indem man die Menge der vertrauenswürdigen Zweigzertifikate einschränkt kann
  man fordern, dass bestimmte Gutachter jede Kante des Subgraphen evaluiert
  haben.

  Hierfür verwendet monotone die Lua Hooks ``get_revision_cert_trust``,
  ``get_manifest_cert_trust`` und ``get_file_cert_trust``. Ein Beispiel für
  den ersten Hook ist im Abschnitt *Trust Evaluation Hooks* des Handbuches zu
  finden. Dieser lässt sich leicht an die anderen beiden anpassen.

  Die Gutachter können Ihre Bewertung bestimmter Revisionen u.a. mit den
  monotone-Befehlen *approve*, *disapprove*, *suspend* ausdrücken.

- Indem man die Menge der geforderten *testresult* Zertifikate angibt, kann
  man verlangen, dass die Endpunkte eines *update* Befehls ein Zertifikat
  haben, welches angibt, dass die betreffende Revision bestimmte Tests oder
  eine Testsuite erfüllt haben.
  haben.

  Hierfür verwendet monotone den Lua Hook ``accept_testresult_change``, der
  durch den monotone-Befehl *update* aufgerufen wird. Die
  Default-Implementierung liefert ``true``, wenn die Datei
  ``_MTN/wanted-testresults`` nicht existiert. Andernfalls sollte diese Datei
  eine Liste von Schlüssel-IDs enthalten, die die Testresultate
  repräsentieren. Dann liefert der Hook ``false``, wenn eine gelistete
  Schlüssel-ID sowohl in der alten als auch in der neuen Revision enthalten
  ist und in der alten Revision ``true`` ist und in der neuen ``false``,
  andernfalls liefert die Default-Implementierung ``true``.

  Ein Testresultat kann mit dem monotone-Befehl *testresult* hinzugefügt
  werden. Sinnvollerweise verwendet man für jeden Test bzw. jede Testsuite,
  die vermerkt werden soll, einen eigenen Schlüssel.
