
.. vim: set sw=2 ts=2 tw=78 et si:

Verteilt über das Netz
======================

Im vorigen Kapitel haben wir uns mit der grundlegenden Arbeitsweise von
monotone vertraut gemacht. Wir sind nun in der Lage, private Projekte
unter Revisionsverwaltung zu stellen. Der nächste Schritt ist die Arbeit
mit mehreren Repositories, die über das Netz synchronisiert werden.

Vorbereiten
-----------

Alle im Repository abgelegten Daten werden mit kryptografischen Schlüsseln
signiert. Das ist ein grundlegendes Element dieses Versionsverwaltungssystems.
Wenn ich gemeinsam mit anderen arbeiten will, muss ich deren Schlüssel kennen
und akzeptieren, genauso, wie sie meinen Schlüssel kennen und akzeptieren
müssen. Der erste Schritt zur Zusammenarbeit ist daher der Austausch der
Schlüssel::

 $ mtn pubkey mathias@example.net > mathias.pubkey

Für meinen eigenen Schlüssel muss ich dabei keine Datenbank angeben. Ich kann
diesen Schlüssel nun an alle Mitarbeiter schicken, die mir ihre öffentliche
Schlüssel senden und meinen Schlüssel importieren::

 $ mtn --db lokales/repository.mtn read < mathias.pubkey

Beim Import muss immer eine Datenbank angegeben werden, weil das Vertrauen
gegenüber fremden Schlüsseln immer projektbezogen ist. Nun kennt monotone also
die Schlüssel aller Beteiligten, das reicht aber noch nicht ganz.

Damit der monotone-Server Daten, die mit anderen (wenn auch bekannten)
Schlüsseln signiert wurden, akzeptiert, muss ich diesen Schlüsseln noch ein
paar Rechte einräumen::

 $ cat >> ~/.monotone/read-permissions <<EOT
 pattern "*"
 allow "mathias@example.net"
 EOT

Dadurch wird mir mit dem Schlüssel *mathias@example.net* erlaubt, alle
Zweige in dem betreffenden Repository zu lesen, das heißt in ein anderes
Repository zu kopieren (zum Beispiel mit ``mtn pull``).

Außerdem brauche ich noch Schreibzugriff, damit ich meine Daten in das
Repository schicken kann (``mtn push`` bzw. ``mtn sync``)::

 $ cat >> ~/.monotone/write-permissions <<EOT
 mathias@example.net
 EOT

Bei den Schreibrechten wird nicht nach Zweig unterschieden.

Damit haben wir die Vorbereitungen abgeschlossen und können einen
monotone Server starten, mit dem die anderen Mitarbeiter ihre Repositories
synchronisieren können.

Abgleich über Netz
------------------

Dieser Teil ist nun wieder sehr simpel. Damit andere sich mit meinem
monotone-Repository abgleichen können, starte ich den Server wie folgt::

 $ mtn --db lokales/repository.mtn serve

Damit lauscht monotone am TCP-Port 4691 und bietet alles aus der Datenbank
``lokales/repository.mtn`` entsprechend den in
``read-permissions`` und ``write-permissions`` eingestellten Regeln an.

Um sich Daten von diesem Server zu holen, gibt man ein::

 $ mtn --db anderes/repository.mtn pull rechner.von.mathias "*"

Dabei kann man statt ``"*"`` auch direkt den Namen des Zweigs angeben oder ein
geeignetes Muster, das alle gewünschten Zweige erfasst.

Wenn man schon einen eigenen, eventuell geänderten Stand hat, will man eher
beide Repositories auf den gleichen Stand bringen::

 $ mtn --db anderes/repository.mtn sync rechner.von.mathias "*"
 
beziehungsweise::

 $ mtn --db anderes/repository.mtn sync

Der zweite Aufruf ist möglich, wenn bereits einmal mit dem Rechner
synchronisiert wurde und dieser als ``default-server`` in der Datenbank
vermerkt ist (siehe ``mtn list vars``).

Wenn ich nur Änderungen auf den Server schieben will, nehme ich::

 $ mtn --db anderes/repository.mtn push

Die Anmerkungen wie zu ``mtn sync`` gelten auch hier.

Zentraler Server
----------------

Ein Grundprinzip von verteilten Versionsverwaltungssystemen ist,
dass ein zentraler Server nicht mehr nötig ist.

Wenn mehrere Leute an einem Projekt arbeiten, insbesondere wenn die Mitarbeiter
räumlich oder zeitlich getrennt sind, ist es trotzdem praktisch ein Repository
zu haben, das immer an der gleichen Stelle über das Netz zu erreichen ist.
Dann wird dieses wie ein zentrales Repository verwendet und der Abgleich
zwischen den Entwicklern kann darüber erfolgen.  Ist der zentrale Server einmal
nicht zu erreichen, ist immer noch der direkte Abgleich zwischen den
Entwicklern möglich.

Ein weiterer Vorteil eines zentralen Servers ist der, dass man zum
Synchronisieren nur noch ``mtn sync`` eingeben muss und den Namen von Server und
Zweig weglassen kann, wenn die betreffenden Variablen in der Datenbank passend
eingestellt sind. Konkret sind das die Variablen ``database: default-server``
und ``database: default-include-pattern``. Diese sehen in etwa so aus::

 $ mtn list vars
 database: default-exclude-pattern 
 database: default-include-pattern net.example.abc
 database: default-server monotone.example.net
 known-servers: monotone.example.net b1c3782090a03536fc21f9f...

Die Variable ``known-servers: monotone.example.net`` enthält den Schlüssel für
den monotone-Server. Dieser Schlüssel wird nicht für das Signieren der Dateien
im Repository sondern nur für die Kommunikation mit dem Server verwendet.
Falls sich der Schlüssel auf dem Server ändert, teilt mir das monotone bei der
nächsten Verbindungsaufnahme mit. Damit ist die Gefahr geringer, dass ich mit
dem falschen Server synchronisiere.

Unter Debian GNU/Linux gibt es ein Paket ``monotone-server``, welches Scripts
enthält, die das Aufsetzen eines monotone-Servers vereinfachen.

Der Server benötigt keine eigene Datensicherung, da alle Versionen, die er
enthält, auch auf den Rechnern der Entwickler vorhanden sind. Bei einem Ausfall
kann ein neues Repository jederzeit aus einem der anderen Repositories,
welches alle Zweige und die letzten Änderungen enthält, neu aufgesetzt werden.
Lediglich der private Schlüssel für den Server sollte an einem sicheren Ort
verwahrt werden, damit beim neuen Aufsetzen mit dem gleichen Schlüssel
weitergearbeitet werden kann und die beteiligten Entwickler keine Meldung über
geänderte Serverschlüssel bei der Synchronisation bekommen.

Anonymer Download
-----------------

Insbesondere bei Open Source Entwicklungen möchte man ein Repository gern zum
einfachen Download der Quellen freigeben. Das wird in
``read-permissions``  eingestellt::

 $ cat >> ~/.monotone/read-permissions <<EOT
 pattern "net.example"
 allow "*"
 EOT

Damit können alle Zweige, die mit *net.example* beginnen, mit ``mtn pull``
gelesen werden. Egal mit welchem Schlüssel.

Andere Transportwege
--------------------

Die Synchronisation der Datenbanken von monotone basiert auf einem Protokoll
namens *netsync*.
Normalerweise transportiert monotone dieses Protokoll über eine
einfache TCP-Verbindung. Das ist nicht der einzige Transportweg, über den
monotone *netsync* verwenden kann. Es ist möglich dieses Protokoll über *SSH*
oder irgendein Programm, das eine Full-Duplex-Verbindung aufbauen kann, zu
verwenden.

Wenn monotone mit dem *pull*, *push* oder *sync* Befehl aufgerufen wird,
reicht es das erste Argument an einen Lua-Hook weiter, der es in einen
Befehl zur Verbindungsaufnahme umwandeln soll.
Wenn dieser Hook einen Befehl
zurückliefert, startet monotone diesen lokal und spricht das *netsync*
Protokoll über die Standardeingabe und -ausgabe des entsprechenden Processes.

Wenn der Lua-Hook keinen Befehl liefert, versucht monotone das
erste Argument als TCP-Adresse zu interpretieren (ein Name mit einer
optionalen Portnummer), baut eine TCP-Verbindung dorthin auf und spricht
*netsync* über diese Verbindung.

Monotone versteht per Default drei URI-Schemata [#URI]_:

.. [#URI] siehe Anhang A0: URI

- SSH-URIs der Form ``ssh://[user@]hostname[:port]/pfad/zur/db.mtn``

  Hierbei wird monotone auf dem fremden Rechner via SSH aufgerufen und das
  *netsync* Protokoll über die Standardein- und -ausgabe verwendet.

  Bei einer SSH-URI muss das Programm *ssh* lokal im Suchpfad für ausführbare
  Programme zu finden sein und das Program *mtn* auf dem entfernten Rechner.

- Datei-URIs in der Form ``file:/pfad/zur/db.mtn``

  Hierbei wird monotone auf dem lokalen Rechner aufgerufen mit der angegebenen
  Datenbank als Argument zu ``--db``. Das *netsync* Protokoll wird wie bei
  SSH-Verbindungen über die Standardein- und -ausgabe verwendet.

  Bei einer Datei-URI muss das Programm *mtn* lokal im Suchpfad für Programme zu
  finden sein.

- monotone(-TCP)-URIS in der Form ``mtn://hostname[:port]``

  Hierbei baut monotone eine TCP-Verbindung zu dem angegebenen Rechner und
  Port 4691 bzw. dem angegebenen Port auf und verwendet das *netsync*
  Protokoll darüber.

Sowohl bei SSH-URIs als auch bei Datei-URIs wird die Datenbank gesperrt,
das heißt man benötigt Schreibrechte
auf die Datenbank, auch wenn man nur mit *pull* Daten holt und die Datenbank
nicht dauerhaft modifiziert. Außerdem wird für diese beiden Transporte die
Default-Authentisierung deaktiviert.

Um weitere Transportwege zu unterstützen, muss man die beiden Lua-Hooks
``get_netsync_connect_command`` und ``use_transport_auth`` anpassen.
