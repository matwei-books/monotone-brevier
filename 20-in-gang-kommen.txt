
.. vim: set sw=2 ts=2 tw=78 et si:

In Gang kommen
==============

Um mit monotone zu arbeiten, benötige ich mindestens ein lokales Repository,
einen Schlüssel um die abgespeicherten Daten zu signieren und einen
Arbeitsbereich, dessen Inhalt von monotone verfolgt wird.

Ein lokales Repository anlegen
------------------------------

Um Dateien mit monotone zu verwalten, muss ich ein lokales
Repository anlegen. Prinzipiell kann man ein Repository für mehrere oder alle
Projekte verwenden, ich ziehe in den meisten Fällen ein Repository für ein
Projekt vor. Das lokale Repository lege ich mit folgendem
Befehl an::

 $ mtn --db /pfad/zum/projekt.mtn db init

Alternativ kann ich bei neueren Versionen von monotone ein lokales Repository
automatisch beim Klonen eines entfernten Repositorys mit dem  Befehl *clone* 
anlegen::

 $ mtn --db /pfad/zum/project.mtn clone server branch

Hierbei ist *project.mtn* der Name der neuen Datenbankdatei, *server* die
Adresse des entfernten Repository und *branch* der Name des
Zweiges, den ich laden will.

Ich habe bei beiden Varianten den Pfad zur Projektdatenbank expliziert
angegeben, weil es mir hier darum ging, Möglichkeiten, ein lokales Repository
[#databaselocation]_ anzulegen, aufzuzeigen.  Bei neueren monotone-Versionen
ist es möglich, auf die Angabe der lokalen Datenbank zu
verzichten. In diesem Fall verwendet monotone die Standarddatenbank
*:default.mtn*. Neuere Versionen verwenden das Verzeichnis
*$HOME/.monotone/databases* beziehungsweise unter MS Windows
*%APPDATA%\\monotone\\databases* für Datenbanken, deren Name
mit einem Doppelpunkt (**:**) beginnt. Wird keine Datenbank
angegeben, so wird die Standarddatenbank genommen.

.. [#databaselocation] Die Datenbank könnte irgendwo abgelegt werden, bei mir
   landeten früher meist alle im Verzeichnis *~/A/monotone*. Seitdem ich die
   Notation *:datenbankname* kenne, lege ich immer mehr Datenbanken im
   Verzeichnis *$HOME/.monotone/databases* ab.

Persönliche Schlüssel erzeugen
------------------------------

Mit meinen persönlichen Schlüsseln signiere ich die Daten, [#signiertedaten]_
die ich im Repository einspeichere. Über diesen Schlüssel
werden auch die Zugriffsrechte auf entfernte Repositories eingestellt::

 $ mtn genkey mathias@example.net

.. [#signiertedaten] Vom Nutzer signiert werden die Zertifikate (author,
   branch, changelog, date, suspend, tag, testresult, ...). Alle anderen
   Daten sind unsigniert.

Um das Kennwort für den Schlüssel nicht jedes Mal eingeben zu müssen, kann ich
(unter UNIX, mit installiertem ssh_agent) den Schlüssel zur Verwaltung an
ssh_agent übergeben::

 $ mtn ssh_agent_export ~/.ssh/id_monotone
 $ chmod 600 ~/.ssh/id_monotone
 $ ssh-agent /bin/bash
 $ ssh-add ~/.ssh/id_monotone

Anschließend brauche ich den monotone-Schlüssel nur noch einmal während der
Sitzung eingeben.

Unter MS Windows wird der ssh-agent von *putty* unterstützt.

Alternativ (und weniger sicher) kann ich das Kennwort in einen Hook in der
Datei *monotonerc* [#monotonerc]_ eintragen::

 $ mkdir ~/.monotone
 $ cat >> ~/.monotone/.monotonerc
 function get_passphrase(keypair_id)
     return "geheim"
 end
 ^D

Den öffentlichen Schlüssel benötige ich, um Änderungen von anderen Entwicklern
zu überprüfen und um Zugriffsrechte für Repositories festzulegen. Um an den
öffentlichen Schlüssel zu kommen, gebe ich das Folgende ein::

 $ mtn pubkey mathias@example.net

Mit diesem Befehl gibt monotone den öffentlichen Schlüssel so in Textform aus,
dass er in andere Datenbanken mit ``mtn read`` eingelesen werden kann.

.. [#monotonerc] Die Datei *monotonerc* bzw. Ihr Äquivalent unter MS Windows
   ist üblicherweise im Verzeichnis *$HOME/.monotone* bzw. unter MS Windows
   in *%APPDATA%\\monotone* zu
   finden. Hier gibt es auch ein Unterverzeichnis *keys*, in dem die
   monotone bekannten Schlüssel gespeichert sind, und das Unterverzeichnis
   *databases*, in dem die von monotone verwalteten Datenbanken liegen.

Einen Arbeitsbereich anlegen
----------------------------

Einen Arbeitsbereich (workspace) kann ich anlegen indem ich einen vorhandenen
Zweig aus einem lokalen Repository auschecke (``mtn checkout``) oder indem ich
einen neuen Arbeitsbereich aufsetze (``mtn setup``). So lege ich einen neuen
Arbeitsbereich an::

 $ mkdir -p ~/P/projekt
 $ cd ~/P/projekt
 $ mtn --db /pfad/zum/projekt.mtn \
       setup --branch projekt.branch

Monotone kann nun im lokalen Repository
*/pfad/zum/projekt.mtn* Dateien aus dem Verzeichnis *~/P/projekt/* im Zweig
*projekt.branch* verwalten. Von sich aus tut es das allerdings nicht. Damit
monotone den aktuellen Stand einer Datei im lokalen Repository verwaltet, muss
ich ihm die Datei vorher bekannt machen.

Dateien hinzufügen / umbenennen / entfernen
-------------------------------------------

Dateien im Arbeitsbereich, die von monotone verwaltet werden sollen, kann ich
ihm mit ``mtn add`` bekannt machen. Mit ``mtn drop`` schließe ich eine Datei
von der weiteren Verwaltung durch monotone aus (ältere Versionen bleiben im
Repository erhalten und zugänglich). Wenn ich eine Datei umbenennen oder in ein
anderes Verzeichnis verschieben und dabei ihre Versionsgeschichte erhalten
möchte, verwende ich ``mtn rename``.

Welche Dateien monotone verwaltet (kennt), zeigt mir das Kommando ``mtn list
known`` im Arbeitsbereich. Dem entsprechend zeigt ``mtn list unknown`` die
Dateien im Arbeitsbereich, die monotone nicht kennt (nicht verwaltet).
Schließlich zeigt ``mtn list ignored`` die Dateien, die monotone gar nicht
kennen will. Diese letzte Liste kann ich mit einer Datei namens *.mtn-ignore*
im Arbeitsbereich beeinflussen [#mtnignore]_.
Damit kann ich die Dateien, deren Änderungen ich nicht verfolgen will,
ausschließen und schließlich mit ``mtn add --unknown`` alle anderen Dateien
mit einem Mal unter Versionsverwaltung stellen.

.. [#mtnignore] Natürlich kann ich auch *.mtn-ignore* mit monotone verwalten.

Änderungen bestätigen
---------------------

Monotone merkt sich nahezu beliebig viele Zwischenstände der von ihm
verwalteten Dateien, aber nur auf Aufforderung mit ``mtn commit``. Dieser
Befehl verlangt eine Notiz, die die damit erzeugte Revision beschreibt. Die
Notiz kann ich mit der Option ``--message`` auf der Kommandozeile mitgeben.
Ansonsten öffnet monotone einen Texteditor, mit dem man die Notiz in aller
Sorgfalt erstellen kann. Erst dann wird der momentane Stand aller verwalteten
Dateien im lokalen Repository zwischengespeichert.

Zweige
------

Zu Beginn der Arbeit an einem Projekt bilden die verschiedenen Versionen
meiner Dateien einen geraden, nicht verzweigten, gerichteten Graphen, der
jeweils vom Vorgänger zum Nachfolger in einer Kette geht.
Man spricht hier auch von Trunk-Version.

Wenn ich bereits einen oder mehrere Stände des Projekts veröffentlicht habe,
wird es früher oder später passieren, das ich einen Fehler in einer schon
veröffentlichten Version bereinigen muss, die weit zurückliegt.
Das ist ein guter Moment um einen neuen Zweig im Repository zu starten,
der genau bei der veröffentlichten Version vom Stamm abzweigt. Monotone pflegt
für mich diesen alternativen Entwicklungszweig im selben Repository und
bezieht unabhängig von den Änderungen in der Trunk-Version alle Änderungen
in diesem Zweig auf die Version, mit der er gestartet wurde.

Ein anderer Grund, einen neuen Zweig einzurichten, wäre zum Beispiel um ein
neues Feature auszuprobieren, für das bei der Entwicklung in der Trunk-Version
keine Zeit ist.

Der einfachste Weg, einen neuen Zweig anzulegen, ist den Namen des neuen
Zweiges beim Commit anzugeben::

 $ mtn --branch trunk.neuerzweig commit

Alternativ kann man den neuen Zweig schon vor dem nächsten Commit anlegen::

 $ mtn cert h: branch trunk.neuerzweig
 $ mtn update --branch trunk.neuerzweig

Obwohl das etwas aufwendiger ist, hat es doch den Vorteil, das man später beim
Commit nicht mehr daran denken muss, den Zweig anzugeben, da die Dateien in
meinem Arbeitsverzeichnis nun bereits zum neuen Zweig gehören und
``mtn commit`` automatisch in diesem aktualisiert.

Änderungen zusammenführen
-------------------------

Wenn in einem Zweig verschiedene Änderungen von einem oder mehreren
Entwicklern bestätigt wurden, kann es passieren, dass es mehrere letzte Stände
gibt. Diese führe ich mit ``mtn merge`` zusammen. Nach der nächsten
Synchronisation der Repositories haben alle wieder den gleichen Stand.

Möchte ich hingegen die Änderungen eines Zweiges auf einen anderen Zweig
anwenden, verwende ich ``mtn propagate``.

Versionen kennzeichnen
----------------------

Ein Problem bei monotone ist für uns Menschen eine bestimmte Revision
zu identifizieren, da bei monotone jede Revision nach dem kryptografischen
Schlüssel (SHA1) der Datei benannt ist, die den Stand ausmacht.

Wenn ich weiß, dass ich eine bestimmte Revision später wieder erkennen
will, zum Beispiel weil ich diese Revision veröffentliche, dann
markiere ich diese Revision mit einem *version tag*.

.. figure:: img/version-tags-grey.png
   :align: left
   :alt: Versionsmarkierung
   :scale: 75 %

Um einen Stand zu markieren, bestätige ich die letzten Änderungen mit ``mtn
commit``, informiere mich über die aktuelle Version mit ``mtn head`` und
markiere diesen Stand mit ``mtn tag <revision> <tag>``.

Ein Repository von CVS übernehmen
---------------------------------

Mitunter habe ich ein älteres Projekt, das ich mit CVS - einem älteren, in
vielen Jahren bewährten, mittlerweile aber an einige Grenzen stoßenden
Versionsverwaltungssystem - gepflegt hatte. Nun wäre es einfach, die letzten
stabilen Stände und die Entwicklungsstände zu nehmen und ein neues Repository
mit monotone anzufangen.

Hier gibt es einen besseren Weg. Wenn ich Zugriff auf das ganze Repository
(auf die Dateien, nicht nur ein Netzwerkzugriff über den CVS-Server) habe,
kann ich
die komplette Historie des Projektes übernehmen. Das Feature wird zwar auf der
Homepage von monotone als "noch etwas unreif" bezeichnet, bei meinen Projekten
funktionierte es immer recht gut. Das Importieren
kann allerdings - insbesondere bei größeren Projekten - etwas länger dauern.
Das ist dem Umstand geschuldet, dass CVS auf Basis von einzelnen Dateien
arbeitet, das heißt, alle
Versionsinformationen sind immer nur an die betreffende Datei gebunden,
während monotone mit Verzeichnisbäumen arbeitet. Um das Manifest für eine
Revision zu erstellen, vergleicht monotone daher das Commit-Datum und die
Commit-Notizen aller Dateien. Das ist nicht trivial und braucht etliche
Rechenzeit. Laut Homepage sind aber schon CVS-Repository in der Größe von etwa
einem GB erfolgreich importiert worden - meine Projekte waren alle kleiner.

Die Vorgehensweise ist wie folgt::

 $ mtn --db=projekt.mtn db init
 $ mtn --db=projekt.mtn genkey cvsimport@example.net
 $ mtn --db=projekt.mtn --branch net.example.abc \
         cvs_import /usr/local/cvsroot/abc
 $ mtn --db=projekt.mtn --branch net.example.abc \
         checkout abc-neu

Als Erstes erzeuge ich eine neue Datenbank und einen Schlüssel für den
CVS-Import. Für den Schlüssel kann ich auch einen vorhandenen nehmen, besser
aber nicht den, mit dem ich normalerweise Zertifikate signiere, damit die
Herkunft leichter unterschieden werden kann. Der monotone-Befehl
``cvs_import`` liest das Repository ein. Dabei ist */usr/local/cvsroot* das
Verzeichnis, welches bei CVS in der Umgebungsvariable *$CVSROOT* verwendet wird
und *abc* der Name des CVS-Projektes, welcher gleichzeitig der Name des
Unterverzeichnisses unter *$CVSROOT* ist. Nach dem Import von CVS hole ich mir
den letzten Stand in den Arbeitsbereich *abc-neu*.
