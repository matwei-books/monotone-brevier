
.. vim: set sw=2 ts=2 tw=80 et si:

4. Zusammenarbeit
=================

Wenn ich mit mehreren zusammen an einem Projekt arbeite, hat es sich
bewährt, wenn wir einen Hauptzweig für die Entwicklung nehmen, in dem die
jeweils letzte lauffähige Version geführt wird, sowie für jeden Entwickler einen
eigenen Zweig, in dem er seine Änderungen in aller Ruhe entwickeln kann und bei
Erreichen eines stabilen Standes diesen mit dem Hauptzweig abgleicht.

Ein anderes Modell wäre z.B. das nur einer der Entwickler Änderungen mit dem
Hauptzweig abgleicht und dazu vorher seinen Zweig mit den Änderungen der
anderen Entwickler aktualisiert.

Wenn ein Stand erreicht ist, der eingefroren und veröffentlicht werden soll,
marikiere ich diese Revision mit einem *version tag* und erzeuge einen neuen
Zweig, in dem nur noch Fehlerkorrekturen für diesen veröffentlichten Stand
gesammelt werden.

4.1. Netzwerk
------------------

Wenn mehrere Leute an einem Projekt arbeiten, insbesondere wenn die Mitarbeiter
räumlich oder zeitlich getrennt sind, ist es praktisch ein Repository zu haben,
das immer über das Netz zu erreichen ist. Dann kann dieses wie ein zentrales
Repository verwendet werden und der Abgleich zwischen den Entwicklern darüber
erfolgen.  Ist dieses Repository einmal nicht zu erreichen, ist immer noch der
direkte Abgleich zwischen den Entwicklern möglich.

Der Server benötigt keine extra Datensicherung, da alle Versionen, die er
enthält auch auf den Rechnern der Entwickler vorhanden sind. Lediglich der
private Schlüssel dieses Servers sollte gesichert sein, um den Server im Falle
eines Ausfalls schnell wieder in Betrieb nehmen zu können.

4.2. Zugriffsrechte
-------------------

Bei Monotone ist es viel wichtige, was aus einer einem Repository herauskommt,
als was hinein geht. Der Austausch über Netzwerk ist eine einfache Kommunikation
von Fakten (Dateiinhalte und Revisionen) und Zusicherungen über deren Wert (die
Zertifikate, mit denen diese signiert sind). Diese Zusicherungen müssen nicht
notwendigerweise geglaubt werden, im Abschnitt Vertrauensgrundlagen wird näher
darauf eingegangen. Es gibt einfache einfache Steuerungsmöglichkeiten für den
grundlegenden Zugriff auf die Datenbank, alles darüber hinausgehende sollte über
Vertrauensverhältnisse geregelt werden.

Konkret kann man Leserechte für den Zugriff über das Netz in der Datei
~/.monotone/read-permissions vergeben und Schreibrechte dementsprechend in der
Datei ~/.monotone/write-permissions. Während die Leserechte auf bestimmte Zweige
beschränkt werden können, werden Schreibrechte für die ganze Datenbank vergeben.

Ein Beispiel für die Datei read-permissions könnte so aussehen::

  pattern "de.in-bad-schmiedeberg.public.*"
  allow "*"
  continue "true"

  pattern "*"
  allow "mathias@weidner.in-bad-schmiedeberg.de"

Dies würde aller Welt Lesezugriff auf alle Zweige erlauben, die mit
"de.in-bad-schmiedeberg.public." anfangen und mir Zugriff auf alle Zweige.

Die Datei write-permissions enthält lediglich eine Aufzählung von zugelassenen
Schlüsseln, einen pro Zeile::

  mathias@weidner.in-bad-schmiedeberg.de

Damit der entsprechende Schlüssel anerkannt wird, muss er vorher mit ``mtn
pubkey`` extrahiert und dann mit ``mtn read`` importiert werden.

4.3. Vertrauensgrundlagen
-------------------------

.. siehe http://monotone.ca//wiki/TrustFoundations/
